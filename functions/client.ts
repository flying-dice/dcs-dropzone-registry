/**
 * Generated by orval v6.23.0 üç∫
 * Do not edit manually.
 * DCS Dropzone Registry
 * DCS Dropzone Registry API
 * OpenAPI spec version: 1.0.0
 */
import axios from 'axios'
import type {
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
export type RunGithubIntegrationParams = {
/**
 * Integration Token
 */
token: string;
};

export type GetIntegrationTokenParams = {
/**
 * Registry Entry Folder ID
 */
id: string;
};

export type EntryLatestReleaseAssetsItem = {
  /** The name of the file # seperates download path and internal zip path */
  source: string;
  /** The name of the installation location relative to install path */
  target: string;
};

export interface EntryLatestRelease {
  /** The array of files to install */
  assets: EntryLatestReleaseAssetsItem[];
  content: string;
  /** The date of the release */
  date: string;
  /** The name of the release */
  name: string;
  /** The release page of the release */
  releasepage: string;
  /** The tag of the release */
  tag: string;
  /** The version of the release */
  version: string;
}

/**
 * The type of the integration
 */
export type EntryIndexIntegrationOneOfType = typeof EntryIndexIntegrationOneOfType[keyof typeof EntryIndexIntegrationOneOfType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EntryIndexIntegrationOneOfType = {
  github: 'github',
} as const;

export type EntryIndexIntegrationOneOf = {
  /** Integration admins, these are the users that can generate tokens to trigger the integration */
  admins: string[];
  /** The owner of the repository */
  owner: string;
  /** The repository name */
  repo: string;
  /** The type of the integration */
  type: EntryIndexIntegrationOneOfType;
};

export type EntryIndexAuthorsItem = {
  avatar?: string;
  name: string;
  url?: string;
};

export interface EntryIndex {
  authors: EntryIndexAuthorsItem[];
  /** The category of the mod, this is used to group mods in the mod browser */
  category: string;
  content: string;
  /** A short description of the mod to be displayed in the mod tile */
  description: string;
  /** The homepage of the mod */
  homepage: string;
  id: string;
  imageUrl: string;
  /** The integration of the mod, this is used to automatically update the mod */
  integration?: EntryIndexIntegrationOneOf;
  /** The license of the mod */
  license: string;
  /** The name of the mod */
  name: string;
  /** The tags of the mod, these are used to filter mods in the mod browser */
  tags: string[];
}

export type RegistryIndex = RegistryIndexItem[];

/**
 * The type of the integration
 */
export type RegistryIndexItemIntegrationOneOfType = typeof RegistryIndexItemIntegrationOneOfType[keyof typeof RegistryIndexItemIntegrationOneOfType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RegistryIndexItemIntegrationOneOfType = {
  github: 'github',
} as const;

export type RegistryIndexItemIntegrationOneOf = {
  /** Integration admins, these are the users that can generate tokens to trigger the integration */
  admins: string[];
  /** The owner of the repository */
  owner: string;
  /** The repository name */
  repo: string;
  /** The type of the integration */
  type: RegistryIndexItemIntegrationOneOfType;
};

export type RegistryIndexItemAuthorsItem = {
  avatar?: string;
  name: string;
  url?: string;
};

export type RegistryIndexItem = {
  authors: RegistryIndexItemAuthorsItem[];
  /** The category of the mod, this is used to group mods in the mod browser */
  category: string;
  /** A short description of the mod to be displayed in the mod tile */
  description: string;
  id: string;
  imageUrl: string;
  /** The integration of the mod, this is used to automatically update the mod */
  integration?: RegistryIndexItemIntegrationOneOf;
  /** The name of the mod */
  name: string;
  /** The tags of the mod, these are used to filter mods in the mod browser */
  tags: string[];
};





  /**
 * @summary Get Registry Index
 */
export const getRegistryIndex = <TData = AxiosResponse<RegistryIndex>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/index.json`,options
    );
  }

/**
 * @summary Get Registry Entry
 */
export const getRegistryEntry = <TData = AxiosResponse<EntryIndex>>(
    id: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/${id}/index.json`,options
    );
  }

/**
 * @summary Get Registry Entry Latest Release
 */
export const getRegistryEntryLatestRelease = <TData = AxiosResponse<EntryLatestRelease>>(
    id: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/${id}/latest.json`,options
    );
  }

/**
 * @summary Get Integration Token
 */
export const getIntegrationToken = <TData = AxiosResponse<string>>(
    params: GetIntegrationTokenParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/integrations/token`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * @summary Trigger Github Integration
 */
export const runGithubIntegration = <TData = AxiosResponse<string>>(
    params: RunGithubIntegrationParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/integrations/github`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

export type GetRegistryIndexResult = AxiosResponse<RegistryIndex>
export type GetRegistryEntryResult = AxiosResponse<EntryIndex>
export type GetRegistryEntryLatestReleaseResult = AxiosResponse<EntryLatestRelease>
export type GetIntegrationTokenResult = AxiosResponse<string>
export type RunGithubIntegrationResult = AxiosResponse<string>
